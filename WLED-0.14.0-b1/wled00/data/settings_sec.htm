<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="viewport" content="width=500" />
    <meta
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
      name="viewport"
    />
    <meta charset="utf-8" />
    <title>安全与更新</title>
    <script>
      var d = document;
      var loc = false,
        locip;
      function H() {
        window.open("https://kno.wled.ge/features/settings/#security-settings");
      }
      function B() {
        window.open("/settings", "_self");
      }
      function U() {
        window.open("/update", "_self");
      }
      function gId(s) {
        return d.getElementById(s);
      }
      function isObj(o) {
        return o && typeof o === "object" && !Array.isArray(o);
      }
      // https://www.educative.io/edpresso/how-to-dynamically-load-a-js-file-in-javascript
      function loadJS(FILE_URL, async = true) {
        let scE = d.createElement("script");
        scE.setAttribute("src", FILE_URL);
        scE.setAttribute("type", "text/javascript");
        scE.setAttribute("async", async);
        d.body.appendChild(scE);
        // success event
        scE.addEventListener("load", () => {
          //console.log("File loaded");
          GetV();
          setBckFilename(gId("bckcfg"));
          setBckFilename(gId("bckpresets"));
        });
        // error event
        scE.addEventListener("error", (ev) => {
          console.log("Error on loading file", ev);
          alert(
            "Loading of configuration script failed.\nIncomplete page data!"
          );
        });
      }
      var timeout;
      function showToast(text, error = false) {
        var x = gId("toast");
        x.innerHTML = text;
        x.classList.add(error ? "error" : "show");
        clearTimeout(timeout);
        x.style.animation = "none";
        timeout = setTimeout(function () {
          x.classList.remove("show");
        }, 2900);
      }
      function uploadFile(fO, name) {
        var req = new XMLHttpRequest();
        req.addEventListener("load", function () {
          showToast(this.responseText, this.status >= 400);
        });
        req.addEventListener("error", function (e) {
          showToast(e.stack, true);
        });
        req.open("POST", "/upload");
        var formData = new FormData();
        formData.append("data", fO.files[0], name);
        req.send(formData);
        fO.value = "";
        return false;
      }
      function checkNum(o) {
        const specialkeys = [
          "Backspace",
          "Tab",
          "Enter",
          "Shift",
          "Control",
          "Alt",
          "Pause",
          "CapsLock",
          "Escape",
          "Space",
          "PageUp",
          "PageDown",
          "End",
          "Home",
          "ArrowLeft",
          "ArrowUp",
          "ArrowRight",
          "ArrowDown",
          "Insert",
          "Delete",
        ];
        // true if key is a number or a special key
        if (event.key.match(/[0-9]/) || specialkeys.includes(event.key))
          return true;
        event.preventDefault();
        return false;
      }
      function setBckFilename(x) {
        x.setAttribute(
          "download",
          "wled_" + x.getAttribute("download") + (sd == "WLED" ? "" : "_" + sd)
        );
      }
      function S() {
        if (window.location.protocol == "file:") {
          loc = true;
          locip = localStorage.getItem("locIp");
          if (!locip) {
            locip = prompt("File Mode. Please enter WLED IP!");
            localStorage.setItem("locIp", locip);
          }
        }
        var url = (loc ? `http://${locip}` : "") + "/settings/s.js?p=6";
        loadJS(url, false); // If we set async false, file is loaded and executed, then next statement is processed
      }
    </script>
    <style>
      @import url("style.css");
    </style>
  </head>
  <body onload="S()">
    <form id="form_s" name="Sf" method="post">
      <div class="toprow">
        <div class="helpB"><button type="button" onclick="H()">?</button></div>
        <button type="button" onclick="B()">返回</button
        ><button type="submit">保存</button>
        <hr />
      </div>
      <h2>安全与更新设置</h2>
      设置 PIN:
      <input
        type="password"
        id="PIN"
        name="PIN"
        size="4"
        maxlength="4"
        minlength="4"
        onkeydown="checkNum(this)"
        pattern="[0-9]*"
        inputmode="numeric"
        title="Please enter a 4 digit number"
      /><br />
      <div style="color: #fa0">
        &#9888; 未加密的传输. 选择PIN时要谨慎,不要用自己的常用密码!
      </div>
      <br /><br />
      无线(OTA)软件更新锁: <input type="checkbox" name="NO" /><br />
      口令: <input type="password" name="OP" maxlength="32" /><br />
      为了启用OTA，出于安全原因，您还需要输入正确的密码!<br />
      当启用OTA时，应该更改密码.<br />
      <b>在不使用OTA时禁用，否则攻击者可以刷新设备软件!</b><br />
      <i>此页面的设置只有在OTA锁定被禁用时才可以更改!</i><br />
      如果被锁定，拒绝访问WiFi设置:
      <input type="checkbox" name="OW" /><br /><br />
      恢复出厂设置： <input type="checkbox" name="RS" /><br />
      所有的设置和预设将被删除.<br /><br />
      <div style="color: #fa0">
        &#9888; 未加密的传输。同一网络上的攻击者可以拦截表单数据!
      </div>
      <hr />
      <h3>固件更新</h3>
      <button type="button" onclick="U()">手动OTA更新</button><br />
      开启 ArduinoOTA: <input type="checkbox" name="AO" />
      <hr />
      <h3>备份与恢复</h3>
      <a class="btn lnk" id="bckcfg" href="/presets.json" download="presets"
        >备份预设</a
      ><br />
      <div>
        恢复预设<br /><input type="file" name="data" accept=".json" />
        <button type="button" onclick="uploadFile(d.Sf.data,'/presets.json');">
          更新</button
        ><br />
      </div>
      <br />
      <a class="btn lnk" id="bckpresets" href="/cfg.json" download="cfg"
        >备份配置</a
      ><br />
      <div>
        恢复配置<br /><input type="file" name="data2" accept=".json" />
        <button type="button" onclick="uploadFile(d.Sf.data2,'/cfg.json');">
          更新</button
        ><br />
      </div>
      <div style="color: #fa0">
        &#9888;恢复预设/配置将覆盖您当前的预设/配置.<br />
        不正确的配置可能需要将 ESP 恢复出厂设置.
      </div>
      出于安全原因，不会备份密码.
      <hr />
      <h3>关于</h3>
      <a href="https://github.com/Aircoookie/WLED/" target="_blank">WLED</a>
      version ##VERSION##<!-- Autoreplaced from package.json --><br /><br />
      此中文固件由“<a
        href="https://space.bilibili.com/602398876"
        target="_blank"
        >创客宏万</a
      >”编译，欢迎关注！<br /><br />
      <a
        href="https://github.com/Aircoookie/WLED/wiki/Contributors-and-credits"
        target="_blank"
        >贡献者, 依赖关系和特别感谢</a
      ><br />
      非常感谢每个帮助我创建WLED的人!<br /><br />
      (c) 2016-2022 Christian Schwinne <br />
      <i
        >许可协议
        <a
          href="https://github.com/Aircoookie/WLED/blob/master/LICENSE"
          target="_blank"
          >MIT 许可</a
        ></i
      ><br /><br />
      服务器消息: <span class="sip"> 响应错误! </span>
      <hr />
      <div id="toast"></div>
      <button type="button" onclick="B()">返回</button
      ><button type="submit">保存</button>
    </form>
  </body>
</html>
